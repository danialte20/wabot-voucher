const { RouterOSAPI } = require('node-routeros');
const config = require('./config');
const services = require('./services');

const connectMikrotik = async () => {
    console.log('[DEBUG] Connecting to Mikrotik:', config.mikrotik.host, config.mikrotik.port, config.mikrotik.username);
    const conn = new RouterOSAPI({
        host: config.mikrotik.host,
        user: config.mikrotik.username,
        password: config.mikrotik.password,
        port: config.mikrotik.port
    });
    try {
        await conn.connect();
        console.log('[DEBUG] Mikrotik connection successful');
        return conn;
    } catch (err) {
        services.logErrorToFile(err);
        console.error('[ERROR] Mikrotik connection failed:', err.message);
        // Notifikasi admin jika gagal koneksi
        try {
            if (services.client && services.ADMIN_NUMBER) {
                await services.client.sendMessage(services.ADMIN_NUMBER, `Gagal koneksi ke Mikrotik: ${err.message}`);
            }
        } catch (e) {
            services.logErrorToFile(e);
        }
        throw err;
    }
};

// Fungsi untuk membuat user hotspot
// Tambahkan parameter creator
const createHotspotUser = async (username, password, profile, limitUptime, creator = 'unknown') => {
    const conn = await connectMikrotik();
    try {
        console.log('[DEBUG] Profile yang dikirim:', profile);
        await conn.write('/ip/hotspot/user/add', [
            `=name=${username}`,
            `=password=${password}`,
            `=profile=${profile.trim()}`, // trim untuk hilangkan spasi
            `=limit-uptime=${limitUptime}`,
            `=comment=Generated by: ${creator}`
        ]);
        console.log('[DEBUG] Hotspot user created:', username);
    } finally {
        await conn.close();
    }
};

// Fungsi untuk menghapus user hotspot
const deleteHotspotUser = async (username) => {
    const conn = await connectMikrotik();
    try {
        const users = await conn.write('/ip/hotspot/user/print', [`?name=${username}`]);
        if (users.length > 0) {
            await conn.write('/ip/hotspot/user/remove', [`=.id=${users[0]['.id']}`]);
            console.log('[DEBUG] Hotspot user deleted:', username);
        }
    } finally {
        await conn.close();
    }
};

// Fungsi untuk mendapatkan semua profil hotspot yang sudah ada di mikrotik
const getHotspotProfiles = async () => {
    const conn = await connectMikrotik();
    try {
        const profiles = await conn.write('/ip/hotspot/user/profile/print');
        return profiles.map(p => p.name);
    } finally {
        await conn.close();
    }
};

module.exports = { 
    connectMikrotik, 
    createHotspotUser, 
    deleteHotspotUser, 
    getHotspotProfiles
};
